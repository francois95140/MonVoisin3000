package services.bdd;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

/**
 * Gestionnaire pour ex√©cuter le microlangage SQLUnification
 * Utilise l'ex√©cutable compil√© en production ou Python en d√©veloppement
 */
public class MicrolangageExecutor {
    
    private static boolean isProduction = false;
    private static boolean executorReady = false;
    
    static {
        // D√©tecter si on est en production (ex√©cutable pr√©sent) ou d√©veloppement
        detectEnvironment();
    }
    
    private static void detectEnvironment() {
        Path executablePath = getExecutablePath();
        isProduction = Files.exists(executablePath);
        
        if (isProduction) {
            System.out.println("üöÄ Mode production d√©tect√© - utilisation de l'ex√©cutable compil√©");
            executorReady = true;
        } else {
            System.out.println("üîß Mode d√©veloppement d√©tect√© - utilisation de Python");
            executorReady = checkPythonEnvironment();
        }
    }
    
    /**
     * Obtient le chemin vers l'ex√©cutable selon l'OS et l'environnement
     */
    private static Path getExecutablePath() {
        boolean isWindows = System.getProperty("os.name").toLowerCase().contains("win");
        String executableName = isWindows ? "SQLUnification.exe" : "SQLUnification";
        
        // Chemins √† tester par ordre de priorit√©
        String[] possiblePaths = {
            // Production install√©e (r√©pertoire courant)
            executableName,
            // Build local (r√©pertoire parent)
            "../" + executableName,
            // Build dans dist
            "../dist/" + executableName,
            // Chemin absolu pour installation syst√®me
            isWindows ? "C:/Program Files/MonVoisin3000/" + executableName : "/opt/MonVoisin3000/" + executableName
        };
        
        for (String pathStr : possiblePaths) {
            Path path = Paths.get(pathStr);
            if (Files.exists(path) && Files.isExecutable(path)) {
                System.out.println("‚úÖ Ex√©cutable trouv√©: " + path.toAbsolutePath());
                return path;
            }
        }
        
        System.out.println("‚ùå Ex√©cutable non trouv√© dans les chemins: " + String.join(", ", possiblePaths));
        return Paths.get(executableName); // Retourner le nom par d√©faut
    }
    
    /**
     * V√©rifie l'environnement Python (mode d√©veloppement)
     */
    private static boolean checkPythonEnvironment() {
        try {
            String venvPath = "../microlangage/venv";
            if (!Files.exists(Paths.get(venvPath))) {
                System.out.println("‚ùå Environnement virtuel Python non trouv√©");
                return false;
            }
            
            boolean isWindows = System.getProperty("os.name").toLowerCase().contains("win");
            if (!Files.exists(Paths.get(isWindows ? "../microlangage/venv/Scripts/python.exe" : "../microlangage/venv/bin/python3"))) {
                System.out.println("‚ùå Ex√©cutable Python non trouv√© dans l'environnement virtuel");
                return false;
            }
            
            System.out.println("‚úÖ Environnement Python pr√™t");
            return true;
            
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la v√©rification Python: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Ex√©cute une requ√™te avec le microlangage
     */
    public static String executeQuery(String databaseType, String query) {
        if (!executorReady) {
            return "erreur: Microlangage non initialis√©";
        }
        
        try {
            ProcessBuilder pb;
            
            if (isProduction) {
                // Mode production - utiliser l'ex√©cutable
                Path executable = getExecutablePath();
                pb = new ProcessBuilder(
                    executable.toString(),
                    databaseType,
                    query
                );
                System.out.println("üöÄ Ex√©cution: " + executable + " " + databaseType + " \"" + query + "\"");
                
            } else {
                // Mode d√©veloppement - utiliser Python
                boolean isWindows = System.getProperty("os.name").toLowerCase().contains("win");
                
                if (isWindows) {
                    // √âchapper les guillemets pour Windows cmd
                    String escapedQuery = query.replace("\"", "\\\"");
                    pb = new ProcessBuilder("cmd", "/c",
                        "cd ..\\microlangage && " +
                        "venv\\Scripts\\python.exe SQLUnification1.py " + databaseType + " \"" + escapedQuery + "\"");
                } else {
                    // √âchapper les quotes pour bash
                    String escapedQuery = query.replace("'", "'\"'\"'");
                    pb = new ProcessBuilder("bash", "-c",
                        "cd ../microlangage && " +
                        "source venv/bin/activate > /dev/null 2>&1; " +
                        "python3 SQLUnification1.py " + databaseType + " '" + escapedQuery + "'");
                }
                System.out.println("üîß Ex√©cution Python: " + databaseType + " \"" + query + "\"");
            }
            
            pb.redirectErrorStream(true);
            Process process = pb.start();
            
            StringBuilder result = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    result.append(line).append("\n");
                }
            }
            
            boolean finished = process.waitFor(30, TimeUnit.SECONDS);
            if (!finished) {
                process.destroyForcibly();
                return "erreur: Timeout lors de l'ex√©cution de la requ√™te";
            }
            
            if (process.exitValue() != 0) {
                return "erreur: √âchec de l'ex√©cution (code " + process.exitValue() + ")\n" + result.toString();
            }
            
            return result.toString().trim();
            
        } catch (Exception e) {
            return "erreur: Exception lors de l'ex√©cution - " + e.getMessage();
        }
    }
    
    /**
     * Teste la disponibilit√© du microlangage
     */
    public static boolean testConnection() {
        String result = executeQuery("test", "SELECT 1");
        return !result.startsWith("erreur:");
    }
    
    /**
     * Obtient des informations sur l'environnement
     */
    public static String getEnvironmentInfo() {
        StringBuilder info = new StringBuilder();
        info.append("Mode: ").append(isProduction ? "Production (ex√©cutable)" : "D√©veloppement (Python)").append("\n");
        info.append("Pr√™t: ").append(executorReady ? "Oui" : "Non").append("\n");
        
        if (isProduction) {
            Path executable = getExecutablePath();
            info.append("Ex√©cutable: ").append(executable).append("\n");
            info.append("Existe: ").append(Files.exists(executable) ? "Oui" : "Non").append("\n");
        } else {
            info.append("Python venv: ../microlangage/venv\n");
        }
        
        return info.toString();
    }
}