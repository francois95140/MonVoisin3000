package services.bdd;

/**
 * Version modernis√©e de Bdd qui utilise MicrolangageExecutor
 * Fonctionne avec l'ex√©cutable compil√© en production et Python en d√©veloppement
 */
public class BddNew {

    private static boolean initialized = false;

    /**
     * Initialise le syst√®me de base de donn√©es
     */
    public static void initBdd() {
        if (initialized) {
            System.out.println("‚úÖ Syst√®me BDD d√©j√† initialis√©");
            return;
        }

        System.out.println("üîß Initialisation du syst√®me BDD...");
        System.out.println(MicrolangageExecutor.getEnvironmentInfo());

        // Tester la disponibilit√© du microlangage
        if (MicrolangageExecutor.testConnection()) {
            initialized = true;
            System.out.println("‚úÖ Syst√®me BDD initialis√© avec succ√®s");
        } else {
            System.out.println("‚ùå √âchec de l'initialisation du syst√®me BDD");
            throw new RuntimeException("Impossible d'initialiser le microlangage");
        }
    }

    /**
     * Ex√©cute une requ√™te SQL via le microlangage
     */
    public static String request(String databaseType, String query) {
        if (!initialized) {
            initBdd();
        }

        System.out.println("üìä Ex√©cution requ√™te: " + databaseType + " -> " + query);
        return MicrolangageExecutor.executeQuery(databaseType, query);
    }

    /**
     * Version avec debug pour le d√©veloppement
     */
    public static String requestWithDebug(String databaseType, String query) {
        if (!initialized) {
            initBdd();
        }

        System.out.println("üîç [DEBUG] Base: " + databaseType);
        System.out.println("üîç [DEBUG] Requ√™te: " + query);
        System.out.println("üîç [DEBUG] " + MicrolangageExecutor.getEnvironmentInfo());

        String result = MicrolangageExecutor.executeQuery(databaseType, query);
        System.out.println("üîç [DEBUG] R√©sultat: " + result);

        return result;
    }

    /**
     * V√©rifie si l'environnement est pr√™t
     */
    public static boolean isEnvironmentReady() {
        return initialized && MicrolangageExecutor.testConnection();
    }

    /**
     * Force la r√©initialisation (pour les cas d'erreur)
     */
    public static void forceReinit() {
        System.out.println("üîÑ R√©initialisation forc√©e du syst√®me BDD");
        initialized = false;
        initBdd();
    }

    /**
     * Obtient des informations sur l'environnement
     */
    public static String getEnvironmentInfo() {
        return MicrolangageExecutor.getEnvironmentInfo() + 
               "Initialis√©: " + initialized + "\n";
    }

    /**
     * Test de compatibilit√©
     */
    public static void testCompatibility() {
        System.out.println("=== Test de compatibilit√© BDD ===");
        System.out.println("OS: " + System.getProperty("os.name"));
        System.out.println("Version: " + System.getProperty("os.version"));
        System.out.println("Architecture: " + System.getProperty("os.arch"));
        System.out.println("R√©pertoire: " + System.getProperty("user.dir"));
        System.out.println();
        System.out.println(getEnvironmentInfo());
    }

    /**
     * Test principal
     */
    public static void main(String[] args) {
        testCompatibility();
        System.out.println("\n=== Initialisation BDD ===");
        initBdd();
        System.out.println("\n=== Test requ√™te ===");
        String result = requestWithDebug("mongo", "SELECT * FROM conversations_db");
        System.out.println("R√©sultat final: " + result);
    }
}